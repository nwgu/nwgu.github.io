# 📢 추상클래스, 인터페이스

**추상클래스(is-a 관계)**

- 일반 클래스와 비슷하지만 abstract 키워드를 사용
- 완전하지 않은 클래스로, 직접 객체를 생성할 수 없음
- 일반 메서드와 추상 메서드를 모두 가질 수 있음
- 자식 클래스는 추상 메서드를 반드시 구현해야 함
- 하나의 클래스만 상속 가능(다중 상속 불가)

**예시코드**

```java
//동물이라는 추상클래스
abstract class 동물 {
	// 일반 필드(변수)
	String 이름;
	int 나이;

	// 생성자
	public 동물(String 이름, int 나이) {
		this.이름 = 이름;
		this.나이 = 나이;
	}

	// 일반 메서드 - 구현이 되어 있음
	public void 정보출력() {
		System.out.println("이름: " + 이름);
		System.out.println("나이: " + 나이 + "살");
	}

	// 추상 메서드 - 자식 클래스에서 반드시 구현해야 함
	public abstract void 소리내기();
}

//추상클래스를 상속받은 강아지 클래스
class 강아지 extends 동물 {
	private String 견종;

	public 강아지(String 이름, int 나이, String 견종) {
		super(이름, 나이); // 부모 클래스 생성자 호출
		this.견종 = 견종;
	}

	// 추상 메서드 구현
	@Override
	public void 소리내기() {
		System.out.println("멍멍!");
	}

	// 자식 클래스의 고유 메서드
	public void 꼬리흔들기() {
		System.out.println(이름 + "이(가) 꼬리를 흔듭니다.");
	}
}

//추상클래스를 상속받은 고양이 클래스
class 고양이 extends 동물 {
	private String 털색깔;

	public 고양이(String 이름, int 나이, String 털색깔) {
		super(이름, 나이);
		this.털색깔 = 털색깔;
	}

	// 추상 메서드 구현
	@Override
	public void 소리내기() {
		System.out.println("야옹~");
	}

	// 자식 클래스의 고유 메서드
	public void 그루밍하기() {
		System.out.println(이름 + "이(가) 그루밍을 합니다.");
	}
}
```

**인터페이스(can-do 관계)**

- interface 키워드 사용
- 모든 메서드가 기본적으로 추상 메서드이다 (Java 8부터 default, static 메서드 예외)
- 상수만 가질 수 있고 변수는 가질 수 없음 (public static final)
- 여러 인터페이스를 동시에 구현할 수 있다(다중 구현 가능)

```java
// 훈련가능 인터페이스
interface 훈련가능 {
    // 인터페이스의 모든 메서드는 기본적으로 추상 메서드 (abstract 키워드 생략 가능)
    void 앉기();
    void 기다리기();
    
    // Java 8부터 default 메서드 지원
    default void 인사하기() {
        System.out.println("반갑습니다!");
    }
}

// 수영가능 인터페이스
interface 수영가능 {
    void 수영하기();
}

// 인터페이스를 구현한 훈련된강아지 클래스
// 클래스는 여러 인터페이스를 동시에 구현할 수 있음
class 훈련된강아지 extends 강아지 implements 훈련가능, 수영가능 {
    public 훈련된강아지(String 이름, int 나이, String 견종) {
        super(이름, 나이, 견종);
    }
    
    // 훈련가능 인터페이스의 메서드 구현
    @Override
    public void 앉기() {
        System.out.println(이름 + "이(가) 앉았습니다.");
    }
    
    @Override
    public void 기다리기() {
        System.out.println(이름 + "이(가) 기다립니다.");
    }
    
    // 수영가능 인터페이스의 메서드 구현
    @Override
    public void 수영하기() {
        System.out.println(이름 + "이(가) 수영을 합니다.");
    }
}

```


**전체 예시**

```java
//1. 추상클래스 예시

//동물이라는 추상클래스
abstract class 동물 {
	// 일반 필드(변수)
	String 이름;
	int 나이;

	// 생성자
	동물(String 이름, int 나이) {
		this.이름 = 이름;
		this.나이 = 나이;
	}

	// 일반 메서드 - 구현이 되어 있음
	void 정보출력() {
		System.out.println("이름: " + 이름);
		System.out.println("나이: " + 나이 + "살");
	}

	// 추상 메서드 - 자식 클래스에서 반드시 구현해야 함
	abstract void 소리내기();
}

//추상클래스를 상속받은 강아지 클래스
class 강아지 extends 동물 {
	String 견종;

	강아지(String 이름, int 나이, String 견종) {
		super(이름, 나이); // 부모 클래스 생성자 호출
		this.견종 = 견종;
	}

	// 추상 메서드 구현
	@Override
	public void 소리내기() {
		System.out.println("멍멍!");
	}

	// 자식 클래스의 고유 메서드
	public void 꼬리흔들기() {
		System.out.println(이름 + "이(가) 꼬리를 흔듭니다.");
	}
}

//추상클래스를 상속받은 고양이 클래스
class 고양이 extends 동물 {
	String 털색깔;

	고양이(String 이름, int 나이, String 털색깔) {
		super(이름, 나이);
		this.털색깔 = 털색깔;
	}

	// 추상 메서드 구현
	@Override
	public void 소리내기() {
		System.out.println("야옹~");
	}

	// 자식 클래스의 고유 메서드
	public void 그루밍하기() {
		System.out.println(이름 + "이(가) 그루밍을 합니다.");
	}
}

//2. 인터페이스 예시

//훈련가능 인터페이스
interface 훈련가능 {
	// 인터페이스의 모든 메서드는 기본적으로 추상 메서드 (abstract 키워드 생략 가능)
	void 앉기();

	void 기다리기();

	// Java 8부터 default 메서드 지원
	default void 인사하기() {
		System.out.println("반갑습니다!");
	}
}

//수영가능 인터페이스
interface 수영가능 {
	void 수영하기();
}

//인터페이스를 구현한 훈련된강아지 클래스
//클래스는 여러 인터페이스를 동시에 구현할 수 있음
class 훈련된강아지 extends 강아지 implements 훈련가능, 수영가능 {
	public 훈련된강아지(String 이름, int 나이, String 견종) {
		super(이름, 나이, 견종);
	}

	// 훈련가능 인터페이스의 메서드 구현
	@Override
	public void 앉기() {
		System.out.println(이름 + "이(가) 앉았습니다.");
	}

	@Override
	public void 기다리기() {
		System.out.println(이름 + "이(가) 기다립니다.");
	}

	// 수영가능 인터페이스의 메서드 구현
	@Override
	public void 수영하기() {
		System.out.println(이름 + "이(가) 수영을 합니다.");
	}
}

//메인 클래스
public class Main {
	public static void main(String[] args) {
		// 추상클래스는 직접 인스턴스화할 수 없음
		// 동물 동물1 = new 동물("동물", 1); // 오류 발생!

		강아지 댕댕이 = new 강아지("댕댕이", 3, "진돗개");
		고양이 냥냥이 = new 고양이("냥냥이", 2, "하얀색");

		System.out.println("=== 강아지 정보 ===");
		댕댕이.정보출력();
		댕댕이.소리내기();
		댕댕이.꼬리흔들기();

		System.out.println("\n=== 고양이 정보 ===");
		냥냥이.정보출력();
		냥냥이.소리내기();
		냥냥이.그루밍하기();

		System.out.println("\n=== 훈련된 강아지 ===");
		훈련된강아지 바둑이 = new 훈련된강아지("바둑이", 4, "리트리버");
		바둑이.정보출력();
		바둑이.소리내기();
		바둑이.앉기();
		바둑이.기다리기();
		바둑이.인사하기(); // default 메서드
		바둑이.수영하기();
	}
}
```

# 📜 중간 점검 - 객체지향

