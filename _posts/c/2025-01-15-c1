---
layout: post
title: "C"
date: 2025-01-15
categories: c
tags: []
---

# C 언어
> 문의 
> 구남우
> 010-8603-0748 
> nwgu99@gmail.com

# C 언어 개발환경
- [`개발환경-웹(설치X)`](https://replit.com/~)
- [`개발환경-툴(설치O)`](https://code.visualstudio.com/)

# 📌 챕터 1 - main 함수
> 1. main 함수는 c 언어 프로그램의 시작과 끝
> 2. 코드는 위에서 부터 아래로 순차적으로 실행된다
> 3. main 함수는 반드시 존재해야 하며 main 함수가 없거나 2개 이상이 있을 수 없음
```c
#include <stdio.h>

int main() 
{
    printf("안녕하세요!");
    return 0;
}
```

### printf 함수
`printf("안녕");`
- 해당 코드는 printf 라는 함수를 호출한 것으로 printf 함수가 제공하는 기능을 사용하겠다는 뜻이다
- ("") 소괄호 안에 쓴 내용이 개발자가 보는 콘솔 화면에 출력되는데, c 언어 문법으로 표현 가능한 데이터여만 한다

### 헤더 파일 선언
`#include <stdio.h>`
- 표준 함수를 사용하기 위해서 반드시 사용되어야 하는 헤더 파일이며, 위와 같은 printf 함수를 사용할 수 있게 해줌

### return을 통한 데이터의 반환
`return 0;`
- 함수가 시작되고 종료될 때 데이터를 반환하는 의미로 return 키워드를 사용할 수 있다
<br>
> 문제 1 : 다음과 같이 출력되는 c 프로그램 작성
```bash
제 이름은 홍길동입니다.
저는 20살입니다.
```
> 문제 2 : 다음과 같이 출력되는 c 프로그램 작성
```bash
*
**
***
```
> 문제 3 : 다음과 같이 출력되는 c 프로그램 작성
```bash
================
|              |
|              |
================
```
> 문제 4 : 다음과 같이 출력되는 c 프로그램 작성
```bash
[성적표]
국어: 90점
영어: 85점
수학: 95점
```
> 문제 5 : 다음과 같이 출력되는 c 프로그램 작성
```bash
5 + 3 = 8
5 - 3 = 2
5 x 3 = 15
```

# 📌 챕터 2 - 주석
> 주석은 프로그램 코드 내에 삽입된 사용자의 메모를 의미한다
```c
/*
파일명 : main.c
작성자 : 홍길동
수정날짜 : 2025-01-01
기능 : printf 함수를 통한 문자열 출력
*/
#include <stdio.h>

int main(void) 
{
    printf("hi");

    return 0;
}
```
> 실행 결과
```bash
hi
```
- 이 처럼 코드엔 작성 되었으나, 주석의 특징으로 결과 값이 콘솔에 출력되지 않는 걸 볼 수 있음
- 프로그램 실행에는 아무런 영향을 주지 않음
> 한 줄 주석
```bash
// 한줄 주석
```
> 여러 줄 주석
```bash
/*
여
러
줄
주
석
*/
```

# 📌 챕터 3 - 변수와 자료형 🟡
> 변수란, 값을 저장하는 공간 또는 변할 수 있는 값이라고도 한다
> c 언어 프로그램에서 사용되는 값은 모두 **메모리** 공간에 저장된다
> 메모리 공간이란, 컴퓨터가 값을 저장하기 위해 사용하는 메모리의 일부분을 의미한다
```c
// 변수의 선언 및 초기화
자료형 변수명 = 값
```
> 1. 자료형 : 저장된 값의 유형을 의마하는 것으로 정수, 실수, 문자 등으로 구분할 수 있음
> 2. 변수명 : 변수를 할당하면 선언된 자료형에 따라 기억장소가 할당되고, 할당된 기억장소의 주소를 대신하여 사용하는 것
> 3. 값 : 변수의 자료형에 맞게 작성된 값으로, 변수에 할당된 메모리 공간에 저장한다

- 다양한 변수의 선언 및 초기화 방법
```c
자료형 변수명1 = 값1; // 변수의 선언과 초기화 동시 진행
자료형 변수명2;      // 변수명2를 선언만하고 값은 저장하지 않은 상태
변수명 = 값2        // 선언만 했던 변수명2에 값2를 저장
변수명3 = 값3;      // 변수명3을 선언하지 않은 상태에서 값3을 할당하려고 함으로 컴파일 에러
```

- 변수는 값을 변경할 수 있다
- 기존 값에 덮어쓰기를 하면된다
```c
int num = 3; // 변수의 선언 및 초기화 완료
num = 5;     // 저장되어있는 3의 값을 5로 덮어쓴다
```

> 아래 코드 처럼 2개 이상의 변수를 동시에 선언 및 초기화 하는 것도 가능하다
```c
#include <stdio.h>

int main(void) 
{
    int number1, number2; // 두 개의 int 형 변수를 한 번에 선언
    number1 = 1;
    number2 = 2;
    int number3 = 3, number4 = 4; // 변수의 선언과 초기화 동시 진행

    return 0;
}
```

# ⚠️ 변수명 규칙 ⚠️
> 1. 변수의 이름은 알파벳(대 소문자 모두 가능), 숫자, 언더바(_)로만 구성
> 2. 변수의 이름은 숫자로 시작할 수 없으며 공백을 포함할 수 없음
> 3. 이미 기능을 가지고 있는 키워드를 변수명으로 사용할 수 없음
> 4. c 언어는 알파벳 대 소문자를 구분함


# 기본 자료형 🟡🟡
> 메모리 공간의 크기가 클수록 표현할 수 있는 값의 범위도 넓어지는 것을 확인 할 수 있다
> 해당 자료형태는 중요하나, 굳이 값의 범위를 암기하는 건 말도 안되기 때문에
> **자료형별**로 **표현할 수 있는 값의 범위**가 다르며, 이는 **메모리 크기의 차이** 때문이라는 사실만 이해하면 된다

| 자료형 | 형태 | 크기(bytes) | 값의 범위 |
|--------|------|------------|-----------|
| char | 문자형 | 1 | -128 ~ 127 |
| short | 정수형 | 2 | -32,768 ~ 32,767 |
| int | 정수형 | 4 | -2,147,483,648 ~ 2,147,483,647 |
| long | 정수형 | 4 또는 8 | -2^31 ~ 2^31-1 (4bytes) / -2^63 ~ 2^63-1 (8bytes) |
| float | 실수형 | 4 | ±3.4×10^-38 ~ ±3.4×10^38 |
| double | 실수형 | 8 | ±1.7×10^-308 ~ ±1.7×10^308 |
| unsigned char | 문자형 | 1 | 0 ~ 255 |
| unsigned int | 정수형 | 4 | 0 ~ 4,294,967,295 |

### 변수 값의 출력
- 아래 형태로 출력하면 컴파일 에러가 발생된다.
```c
#include <stdio.h>

int main(void) 
{
    int num = 5; 
    printf(num); // c 컴파일러가 어떻게 표현해줘야 할지몰라서 컴파일 에러가 발생된다

    return 0;
}
```
- 이유는 변수의 데이터 타입을 명시하고 출력 형식을 지정하기 위해 **형식지정자** 를 써야한다
- 그렇게 해야 c 컴파일러는 메모리에 저장된 값을 어떤 형태로 해석해야 할지 알 수 있다
```c
#include <stdio.h>

int main(void) 
{
    int num = 5; 
    printf("%d",num); // %d 형식지정자로, 정수값을 표현할 수 있게 해준다

    return 0;
}
```
# ⚠️ 형식 지정자 ⚠️

| 형식 지정자 | 설명 | 예시 | 실무 활용도 |
|------------|------|------|------------|
| %d | 정수 출력 | printf("%d", 123) | 매우 높음 |
| %s | 문자열 출력 | printf("%s", "hello") | 매우 높음 | 
| %f | 실수 출력 | printf("%f", 3.14) | 높음 |
| %.2f | 소수점 2자리 | printf("%.2f", 3.14159) | 높음 |
| %x | 16진수 | printf("%x", 255) | 보통 |
| %c | 단일 문자 | printf("%c", 'A') | 낮음 |
| %p | 포인터 주소 | printf("%p", &var) | 디버깅용 |
| %u | 부호없는 정수 | printf("%u", 123) | 특수 케이스 |

<br>

**모두 문자열이 아닌 값을 저장한 변수 값도 사용하여야 함**
> 문제 1 : 다음과 같이 출력되는 c 프로그램 작성
```bash
5 10
```
> 문제 2 : 다음과 같이 출력되는 c 프로그램 작성
```bash
내가 좋아하는 숫자는 7
```
> 문제 3 : 다음과 같이 출력되는 c 프로그램 작성
```bash
1학년 3반 15번
```
> 문제 4 : 다음과 같이 출력되는 c 프로그램 작성
```bash
3 + 4 = 7
```
> 문제 5 : 다음과 같이 출력되는 c 프로그램 작성
```bash
내 키: 170
```
> 문제 6 : 다음과 같이 출력되는 c 프로그램 작성
```bash
내 나이: 20살
```
> 문제 7 : 다음과 같이 출력되는 c 프로그램 작성
```bash
전화번호 앞자리: 010
```
> 문제 8 : 다음과 같이 출력되는 c 프로그램 작성
```bash
학번: 2024
```
> 문제 9 : 다음과 같이 출력되는 c 프로그램 작성
```bash
점수: 90점
```

# 📌 챕터 4 - 상수
### 상수는 변하지 않는 값을 의미한다
### C언어에선 크게 3가지 종류의 상수가 존재한다
> ~~리터럴 상수~~

> 심볼릭 상수
- const 키워드를 사용하여 정의
- 일반적인 변수 선언과 똑같이 한 후, 자료형 보다 앞에 const 라는 키워드를 붙이는데 해당 값은 이제 변경될 수 없다
```c
const int LENGTH = 10; // 문법적으로 변수명을 대문자로 쓰는 건 필수가 아니지만, 관례적으로 코드 작성 규칙이다
```
> 매크로 상수
- #define 지시어를 사용하여 정의
```c
#include <stdio.h>
#define LENGTH 10

int main(void) 
{
    printf("%d\n", LENGTH);
    
    return 0;
}
```

### ❓ 그래서 두 개가 뭔 차이지??
### 📢 주요 차이

| 특성               | 심볼릭 상수 (const)                           | 매크로 상수 (#define)                        |
|-------------------|----------------------------------------------|---------------------------------------------|
| **타입 검사**      | 있음 (타입 안전성 있음)                      | 없음 (타입 안전성 없음)                     |
| **컴파일 타임 처리**| 컴파일러에서 처리 (변수처럼 취급됨)           | 전처리기에서 처리 (단순 텍스트 치환)        |
| **디버깅**         | 변수처럼 디버깅 가능                         | 코드에서 치환된 값을 추적하기 어려움        |
| **메모리 사용**    | 메모리 공간을 차지 (상수로 저장됨)            | 메모리 공간 차지 없음 (값을 대체함)         |
| **조건부 컴파일**  | 불가능                                       | 가능 (#if, #ifdef 등 조건부 컴파일 사용 가능) |

### 타입 안전성, 코드 가독성, 유지보수 측면에서 유리한 건 심볼릭 상수다

<br>

### 📢 지시어, 키워드 차이

| 특성            | 지시어 (Directive)                                      | 키워드 (Keyword)                                     |
|-----------------|--------------------------------------------------------|-----------------------------------------------------|
| **정의**         | 컴파일 전 전처리기에서 처리되는 명령어                  | C 언어의 문법을 정의하는 예약된 단어                |
| **형태**         | `#`로 시작                                             | 소문자만 사용                                        |
| **처리 시점**    | 컴파일 전, 전처리기 단계에서 처리                      | 컴파일러가 직접 처리                                |
| **사용 목적**    | 코드의 조건부 컴파일, 매크로 정의, 파일 포함 등       | 변수 선언, 제어문, 함수 선언 등 문법적 용도         |
| **사용 불가**    | 사용자 정의 이름으로 사용할 수 없음                   | 예약어로 사용되어 변수명 등으로 사용할 수 없음     |